const questionData = [
  {
    category: "test",
    question: "What's the worst part about coding interviews?",
    answerOne: "XAlgos",
    answerTwo: "CGetting the interview in the first place",
    answerThree: "XNetworking",
    answerFour: "XMaking it to the final round and they change the offer",
    answerFive: "XWhat's a coding interview?",
    timesCorrect: 4,
    timesIncorrect: 2,
  },
  {
    category: "Time and Space Complexity",
    question: "What is the time complexity of the 'splice' method in JavaScript?",
    answerOne: "CConstant (O(1))",
    answerTwo: "CLinear (O(n))",
    answerThree: "XQuadratic (O(n^2))",
    answerFour: "XLogarithmic (O(log n))",
    answerFive: "XExponential (O(2^n))",
    timesCorrect: 2,
    timesIncorrect: 6,
  },
  {
    category: "Time and Space Complexity",
    question: "Which sorting algorithm has the best average-case time complexity?",
    answerOne: "XBubble Sort",
    answerTwo: "CMerge Sort",
    answerThree: "XSelection Sort",
    answerFour: "CQuick Sort",
    answerFive: "XInsertion Sort",
    timesCorrect: 1,
    timesIncorrect: 4,
  },
  {
    category: "Arrays",
    question: "What is the purpose of the 'map' method in JavaScript?",
    answerOne:
      "CTo create a new array with the results of calling a provided function on every element in the original array",
    answerTwo: "XTo remove the first element from an array",
    answerThree: "XTo concatenate two arrays together",
    answerFour: "XTo find the index of a particular element in an array",
    answerFive: "XTo check if all elements in an array pass a certain condition",
    timesCorrect: 7,
    timesIncorrect: 3,
  },
  {
    category: "Time and Space Complexity",
    question: "What is the space complexity of a recursive function?",
    answerOne: "XConstant (O(1))",
    answerTwo: "XLinear (O(n))",
    answerThree: "XQuadratic (O(n^2))",
    answerFour: "CLinear (O(log n))",
    answerFive: "XExponential (O(2^n))",
  },

  // Arrays
  {
    category: "Arrays",
    question: "What is the time complexity of accessing an element in an array by index?",
    answerOne: "CConstant (O(1))",
    answerTwo: "XLinear (O(n))",
    answerThree: "XQuadratic (O(n^2))",
    answerFour: "XLogarithmic (O(log n))",
    answerFive: "XExponential (O(2^n))",
    timesCorrect: 0,
    timesIncorrect: 3,
  },
  {
    category: "Arrays",
    question: "Which array method is used to add elements to the end of an array?",
    answerOne: "Cpush",
    answerTwo: "Xunshift",
    answerThree: "Xshift",
    answerFour: "Xpop",
    answerFive: "Xconcat",
    timesCorrect: 7,
    timesIncorrect: 0,
  },
  {
    category: "Arrays",
    question: "What is the result of applying the 'reduce' method on an array?",
    answerOne: "CReduces the array to a single value",
    answerTwo: "XFilters the array based on a given condition",
    answerThree: "XSorts the array in ascending order",
    answerFour: "XReturns a new array with modified elements",
    answerFive: "XChecks if all elements satisfy a given condition",
    timesCorrect: 7,
    timesIncorrect: 3,
  },

  {
    category: "Linked Lists",
    question:
      "What is the time complexity of inserting a new node at the beginning of a linked list?",
    answerOne: "CConstant (O(1))",
    answerTwo: "XLinear (O(n))",
    answerThree: "XQuadratic (O(n^2))",
    answerFour: "XLogarithmic (O(log n))",
    answerFive: "XExponential (O(2^n))",
    timesCorrect: 1,
    timesIncorrect: 3,
  },
  {
    category: "Linked Lists",
    question:
      "Which data structure is similar to a linked list but allows traversal in both directions?",
    answerOne: "XDoubly Linked List",
    answerTwo: "CSingly Linked List",
    answerThree: "XStack",
    answerFour: "XQueue",
    answerFive: "XArray",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Linked Lists",
    question:
      "Which operation is more efficient in a singly linked list: insert at the head or insert at the tail?",
    answerOne: "XInsert at the head",
    answerTwo: "CInsert at the tail",
    answerThree: "XBoth have the same efficiency",
    answerFour: "XNeither operation is efficient",
    answerFive: "XIt depends on the length of the linked list",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Linked Lists",
    question: "What is the space complexity of a singly linked list with N nodes?",
    answerOne: "CLinear (O(N))",
    answerTwo: "XConstant (O(1))",
    answerThree: "XQuadratic (O(N^2))",
    answerFour: "XLogarithmic (O(log N))",
    answerFive: "XExponential (O(2^N))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Linked Lists",
    question: "What is the time complexity of searching for an element in a singly linked list?",
    answerOne: "XConstant (O(1))",
    answerTwo: "CLinear (O(n))",
    answerThree: "XQuadratic (O(n^2))",
    answerFour: "XLogarithmic (O(log n))",
    answerFive: "XExponential (O(2^n))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },

  {
    category: "Graphs",
    question: "Which data structure is used to represent a graph?",
    answerOne: "XArray",
    answerTwo: "XLinked List",
    answerThree: "XStack",
    answerFour: "XQueue",
    answerFive: "CAdjacency List",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Graphs",
    question:
      "What is the time complexity of breadth-first search (BFS) on a graph with V vertices and E edges?",
    answerOne: "XConstant (O(1))",
    answerTwo: "CLinear (O(V + E))",
    answerThree: "XQuadratic (O(V^2))",
    answerFour: "XLogarithmic (O(log V))",
    answerFive: "XExponential (O(2^V))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Graphs",
    question: "What is the purpose of Dijkstra's algorithm?",
    answerOne: "XTo perform depth-first search (DFS) on a graph",
    answerTwo: "CTo find the shortest path between two nodes in a weighted graph",
    answerThree: "XTo detect cycles in a directed graph",
    answerFour: "XTo perform topological sorting of a graph",
    answerFive: "XTo perform binary search on a sorted array",
    timesCorrect: 0,
    timesIncorrect: 0,
  },

  {
    category: "Binary Trees",
    question: "What is the time complexity of searching for a value in a binary search tree (BST)?",
    answerOne: "XConstant (O(1))",
    answerTwo: "CLogarithmic (O(log n))",
    answerThree: "XLinear (O(n))",
    answerFour: "XQuadratic (O(n^2))",
    answerFive: "XExponential (O(2^n))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },

  {
    category: "Binary Trees",
    question:
      "Which traversal visits the left subtree, then the root, and finally the right subtree of a binary tree?",
    answerOne: "XIn-order traversal",
    answerTwo: "XPre-order traversal",
    answerThree: "XPost-order traversal",
    answerFour: "XCircular traversal",
    answerFive: "CNone of the above",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Binary Trees",
    question: "What is the height of a perfectly balanced binary tree with 7 nodes?",
    answerOne: "X1",
    answerTwo: "C2",
    answerThree: "X3",
    answerFour: "X4",
    answerFive: "X5",
    timesCorrect: 0,
    timesIncorrect: 0,
  },

  {
    category: "Sorting Algorithms",
    question: "Which sorting algorithm is known for its 'divide and conquer' approach?",
    answerOne: "XBubble Sort",
    answerTwo: "CMerge Sort",
    answerThree: "XSelection Sort",
    answerFour: "XQuick Sort",
    answerFive: "XInsertion Sort",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Recursion",
    question: "What is recursion?",
    answerOne: "CThe process of a function calling itself",
    answerTwo: "XThe process of a function modifying itself",
    answerThree: "XThe process of a function returning multiple values",
    answerFour: "XThe process of a function generating random numbers",
    answerFive: "XThe process of a function terminating abruptly",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Sorting Algorithms",
    question:
      "Which sorting algorithm is most suitable for large datasets and is commonly used in practice?",
    answerOne: "XBubble Sort",
    answerTwo: "XMerge Sort",
    answerThree: "XSelection Sort",
    answerFour: "XQuick Sort",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Recursion",
    question: "What is recursion?",
    answerOne: "CThe process of a function calling itself",
    answerTwo: "XThe process of a function modifying itself",
    answerThree: "XThe process of a function returning multiple values",
    answerFour: "XThe process of a function generating random numbers",
    answerFive: "XThe process of a function terminating abruptly",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Recursion",
    question: "What is the base case in a recursive function?",
    answerOne: "CThe condition that stops the recursion",
    answerTwo: "XThe first step of the recursive algorithm",
    answerThree: "XThe final step of the recursive algorithm",
    answerFour: "XThe maximum recursion depth",
    answerFive: "XThe initial value passed to the recursive function",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Recursion",
    question: "Which data structure is typically used to implement recursion?",
    answerOne: "XArray",
    answerTwo: "XLinked List",
    answerThree: "XStack",
    answerFour: "CStack",
    answerFive: "XQueue",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Dynamic Programming",
    question: "What is dynamic programming used for?",
    answerOne: "CTo efficiently solve problems by breaking them down into overlapping subproblems",
    answerTwo: "XTo implement algorithms that continuously adapt to changing input",
    answerThree: "XTo perform mathematical calculations involving complex numbers",
    answerFour: "XTo analyze the time and space complexity of algorithms",
    answerFive: "XTo handle exceptions and errors in JavaScript",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Dynamic Programming",
    question: "What is the key concept behind dynamic programming?",
    answerOne: "XIteration",
    answerTwo: "XRecursion",
    answerThree: "XBacktracking",
    answerFour: "CMemoization",
    answerFive: "XBranch and bound",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Dynamic Programming",
    question:
      "Which problem-solving technique is often used in conjunction with dynamic programming?",
    answerOne: "XBinary search",
    answerTwo: "XCircular linked list",
    answerThree: "XDepth-first search",
    answerFour: "XCaching",
    answerFive: "CGreedy algorithm",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Time and Space Complexity",
    question: "What is the time complexity of a binary search algorithm?",
    answerOne: "XConstant (O(1))",
    answerTwo: "CLogarithmic (O(log n))",
    answerThree: "XLinear (O(n))",
    answerFour: "XQuadratic (O(n^2))",
    answerFive: "XExponential (O(2^n))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Time and Space Complexity",
    question: "What is the space complexity of a recursive algorithm with a depth of 'd'?",
    answerOne: "XO(1)",
    answerTwo: "XO(log n)",
    answerThree: "XO(n)",
    answerFour: "XO(n log n)",
    answerFive: "CO(d)",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Time and Space Complexity",
    question: "What is the time complexity of a bubble sort algorithm?",
    answerOne: "XConstant (O(1))",
    answerTwo: "XLogarithmic (O(log n))",
    answerThree: "XLinear (O(n))",
    answerFour: "CQuadratic (O(n^2))",
    answerFive: "XExponential (O(2^n))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  // Arrays
  {
    category: "Arrays",
    question: "Which built-in JavaScript method is used to remove the last element from an array?",
    answerOne: "Xarray.pop()",
    answerTwo: "Xarray.shift()",
    answerThree: "Xarray.splice()",
    answerFour: "Xarray.concat()",
    answerFive: "Carray.pop()",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Arrays",
    question: "What is the time complexity of inserting an element at the beginning of an array?",
    answerOne: "XConstant (O(1))",
    answerTwo: "XLogarithmic (O(log n))",
    answerThree: "XLinear (O(n))",
    answerFour: "XQuadratic (O(n^2))",
    answerFive: "CLinear (O(n))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Arrays",
    question: "How do you check if an element exists in an array using JavaScript?",
    answerOne: "Xarray.check(element)",
    answerTwo: "Xarray.find(element)",
    answerThree: "Xarray.includes(element)",
    answerFour: "Xarray.indexOf(element) !== -1",
    answerFive: "CAll of the above",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  // Linked Lists
  {
    category: "Linked Lists",
    question: "In a singly linked list, how do you insert a node at the end?",
    answerOne: "XCreate a new node and set it as the head",
    answerTwo: "XTraverse the entire list and insert the node at the last position",
    answerThree: "XNone of the above",
    answerFour: "CTraverse the list until the last node and update its 'next' pointer",
    answerFive: "XUse recursion to insert the node at the end",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Linked Lists",
    question: "Which type of linked list allows traversal in both directions?",
    answerOne: "XUnidirectional linked list",
    answerTwo: "CDoubly linked list",
    answerThree: "XCircular linked list",
    answerFour: "XStatic linked list",
    answerFive: "XDynamic linked list",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Linked Lists",
    question: "What is the time complexity of removing a node from a singly linked list?",
    answerOne: "XConstant (O(1))",
    answerTwo: "XLogarithmic (O(log n))",
    answerThree: "XLinear (O(n))",
    answerFour: "XQuadratic (O(n^2))",
    answerFive: "CLinear (O(n))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  // Graphs
  {
    category: "Graphs",
    question: "What is the maximum number of edges in an undirected graph with 'n' vertices?",
    answerOne: "Xn",
    answerTwo: "XC(n, 2)",
    answerThree: "Xn^2",
    answerFour: "C(n(n-1))/2",
    answerFive: "X2^n",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Graphs",
    question:
      "What is the time complexity of depth-first search (DFS) in a graph with 'V' vertices and 'E' edges?",
    answerOne: "XO(1)",
    answerTwo: "XO(log n)",
    answerThree: "CΟ(V + E)",
    answerFour: "XO(V * E)",
    answerFive: "XO(V^2)",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Graphs",
    question: "Which data structure is commonly used to implement breadth-first search (BFS)?",
    answerOne: "XArray",
    answerTwo: "XLinked List",
    answerThree: "XStack",
    answerFour: "XQueue",
    answerFive: "CQueue",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  // Binary Trees
  {
    category: "Binary Trees",
    question: "What is the height of a binary tree with a single node?",
    answerOne: "X0",
    answerTwo: "C1",
    answerThree: "X2",
    answerFour: "X3",
    answerFive: "X4",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Binary Trees",
    question: "What is the maximum number of nodes at depth 'd' in a binary tree?",
    answerOne: "X0",
    answerTwo: "X1",
    answerThree: "X2",
    answerFour: "X2^d",
    answerFive: "C2^(d+1) - 1",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Binary Trees",
    question:
      "Which traversal visits the root, then the left subtree, and finally the right subtree of a binary tree?",
    answerOne: "XIn-order traversal",
    answerTwo: "XCircular traversal",
    answerThree: "XPost-order traversal",
    answerFour: "XLevel-order traversal",
    answerFive: "CPre-order traversal",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  // Hash Tables
  {
    category: "Hash Tables",
    question:
      "What is the average time complexity for searching in a hash table with a good hash function?",
    answerOne: "XConstant (O(1))",
    answerTwo: "XLogarithmic (O(log n))",
    answerThree: "XLinear (O(n))",
    answerFour: "CConstant (O(1)) with a good hash function",
    answerFive: "XQuadratic (O(n^2))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Hash Tables",
    question: "Which data structure is commonly used to implement hash tables?",
    answerOne: "XArray",
    answerTwo: "XLinked List",
    answerThree: "XStack",
    answerFour: "XQueue",
    answerFive: "CArray and Linked List",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Hash Tables",
    question: "What is the worst-case time complexity for searching in a hash table?",
    answerOne: "XConstant (O(1))",
    answerTwo: "XLogarithmic (O(log n))",
    answerThree: "CLinear (O(n))",
    answerFour: "XQuadratic (O(n^2))",
    answerFive: "XExponential (O(2^n))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  // Sorting Algorithms
  {
    category: "Sorting Algorithms",
    question: "What is the worst-case time complexity of the bubble sort algorithm?",
    answerOne: "XConstant (O(1))",
    answerTwo: "XLogarithmic (O(log n))",
    answerThree: "XLinear (O(n))",
    answerFour: "CQuadratic (O(n^2))",
    answerFive: "XExponential (O(2^n))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Sorting Algorithms",
    question: "Which sorting algorithm is known for its 'divide and conquer' strategy?",
    answerOne: "XInsertion Sort",
    answerTwo: "XSelection Sort",
    answerThree: "XCocktail Sort",
    answerFour: "XHeap Sort",
    answerFive: "CMerge Sort",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Sorting Algorithms",
    question: "What is the average time complexity of quicksort?",
    answerOne: "XConstant (O(1))",
    answerTwo: "XLogarithmic (O(log n))",
    answerThree: "XLinear (O(n))",
    answerFour: "XQuadratic (O(n^2))",
    answerFive: "CLinearithmic (O(n log n))",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  // Recursion
  {
    category: "Recursion",
    question: "What is the base case in a recursive function?",
    answerOne: "XThe starting point of the recursion",
    answerTwo: "XThe recursive call",
    answerThree: "XThe final step of the recursion",
    answerFour: "XThe recursive function itself",
    answerFive: "CThe condition that terminates the recursion",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Recursion",
    question: "What is tail recursion?",
    answerOne: "XClimbing a mountain by going from base to peak",
    answerTwo: "XRecursing with a large stack size",
    answerThree: "XWhen the recursive call is the last operation in a function",
    answerFour: "XRecursing without a base case",
    answerFive: "CWhen the recursive call is the first operation in a function",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Recursion",
    question: "What is the time complexity of a recursive function with a depth of 'd'?",
    answerOne: "XO(1)",
    answerTwo: "XO(log n)",
    answerThree: "XO(n)",
    answerFour: "XO(n log n)",
    answerFive: "CO(2^n)",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  // Object-Oriented Programming
  {
    category: "Object-Oriented Programming",
    question: "What is encapsulation in object-oriented programming?",
    answerOne: "XInheriting properties and methods from a parent class",
    answerTwo: "XHiding the internal details of an object and providing an interface to access it",
    answerThree: "XCreating multiple instances of a class",
    answerFour: "XCombining multiple classes into a single class",
    answerFive: "XImplementing polymorphism in a class",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Object-Oriented Programming",
    question:
      "Which principle of object-oriented programming suggests that objects of different classes can be treated as objects of the same class in an inheritance hierarchy?",
    answerOne: "XEncapsulation",
    answerTwo: "XAbstraction",
    answerThree: "XPersistence",
    answerFour: "XPanache",
    answerFive: "CPolymorphism",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Object-Oriented Programming",
    question: "What is inheritance in object-oriented programming?",
    answerOne: "XStoring objects in a collection",
    answerTwo: "XCreating multiple instances of a class",
    answerThree: "XAllowing a class to inherit properties and methods from another class",
    answerFour: "XHiding the internal details of an object and providing an interface to access it",
    answerFive: "XCombining multiple classes into a single class",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  // SQL
  {
    category: "SQL",
    question: "Which SQL keyword is used to retrieve data from a database?",
    answerOne: "XSELECT",
    answerTwo: "XUPDATE",
    answerThree: "XDELETE",
    answerFour: "XINSERT",
    answerFive: "XALTER",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "SQL",
    question: "Which SQL statement is used to delete a table from a database?",
    answerOne: "XREMOVE TABLE",
    answerTwo: "XDROP TABLE",
    answerThree: "XDELETE TABLE",
    answerFour: "XERASE TABLE",
    answerFive: "CNone of the above",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "SQL",
    question: "What does the SQL acronym stand for?",
    answerOne: "XCoded Query Language",
    answerTwo: "XCompiled Query Language",
    answerThree: "XComputer Query Language",
    answerFour: "XCommand Query Language",
    answerFive: "CStructured Query Language",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  // Regular Expressions
  {
    category: "Regular Expressions",
    question: "Which character is used in regular expressions to match any single character?",
    answerOne: "X*",
    answerTwo: "X+",
    answerThree: "X?",
    answerFour: "C.",
    answerFive: "X^",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Regular Expressions",
    question: "What does the 'g' flag mean in a regular expression?",
    answerOne: "XGlobal search",
    answerTwo: "XCase-insensitive search",
    answerThree: "XMultiline search",
    answerFour: "XSticky search",
    answerFive: "CAll of the above",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Regular Expressions",
    question: "Which method in JavaScript is used to match a regular expression against a string?",
    answerOne: "Xmatch()",
    answerTwo: "Xsearch()",
    answerThree: "Xreplace()",
    answerFour: "Xsplit()",
    answerFive: "Ctest()",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  // Networking
  {
    category: "Networking",
    question: "What is the purpose of the HTTP protocol?",
    answerOne: "XTo transfer files between a client and a server",
    answerTwo: "XTo send emails",
    answerThree: "CTo transfer hypertext documents over the Internet",
    answerFour: "XTo establish a secure connection between a client and a server",
    answerFive: "XTo resolve domain names to IP addresses",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Networking",
    question: "Which protocol is used to send emails?",
    answerOne: "XHTTP",
    answerTwo: "XFTP",
    answerThree: "XSMTP",
    answerFour: "XPOP3",
    answerFive: "XDNS",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
  {
    category: "Networking",
    question: "What is the IP address 127.0.0.1 commonly known as?",
    answerOne: "XLocal Area Network",
    answerTwo: "XDomain Name Server",
    answerThree: "XInternet Protocol",
    answerFour: "CLoopback Address",
    answerFive: "XNetwork Gateway",
    timesCorrect: 0,
    timesIncorrect: 0,
  },
];
module.exports = questionData;
